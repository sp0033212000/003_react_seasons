{"version":3,"sources":["SeasonDispaly.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","console","log","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"sMAGMA,G,MAAe,CACjBC,OAAQ,CACJC,KAAM,uBACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,sBACNC,SAAU,eA2BHE,EAfO,SAACC,GACnB,IATeC,EAAKC,EASdC,GATSF,EASUD,EAAMC,KATXC,GASgB,IAAIE,MAAOC,YARpC,GAAKH,EAAQ,EACbD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIH,EAEFP,EAAaS,GAAhCP,EAFqB,EAErBA,KAAMC,EAFe,EAEfA,SAEd,OACI,yBAAKS,UAAS,yBAAoBH,IAC9B,uBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,4BACMD,GAEN,uBAAGU,UAAS,6BAAwBT,EAAxB,aC9BlBU,EAAU,SAACP,GACb,OACI,yBAAKM,UAAU,oBACX,yBAAKA,UAAU,sBAAuBN,EAAMQ,WAKxDD,EAAQE,aAAe,CACnBD,QAAS,cAGED,QCTTG,E,2MACFC,MAAQ,CAAEV,IAAK,KAAMW,aAAc,I,mFAEd,IAAD,OAChBC,OAAOC,UAAUC,YAAYC,oBACzB,SAACC,GAEG,EAAKC,SAAS,CAACjB,IAAKgB,EAASE,OAAOC,cAExC,SAACC,GACG,EAAKH,SAAS,CAAEN,aAAcS,EAAIb,e,2CAM1Cc,QAAQC,IAAI,oD,sCAIZ,OAAGC,KAAKb,MAAMC,eAAiBY,KAAKb,MAAMV,IAC/B,uCAAauB,KAAKb,MAAMC,eAG/BY,KAAKb,MAAMC,cAAgBY,KAAKb,MAAMV,IAC/B,kBAAC,EAAD,CAAeA,IAAKuB,KAAKb,MAAMV,MAGnC,kBAAC,EAAD,CAASO,QAAQ,qC,+BAKxB,OACI,yBAAKF,UAAU,cACVkB,KAAKC,qB,GAnCJC,IAAMC,WAyCxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.75687f7b.chunk.js","sourcesContent":["import './SeasonDisplay.css';\nimport React from 'react';\n\nconst seasonConfig = {\n    summer: {\n        text: \"Let's hit the beach!\",\n        iconName: 'sun'\n    },\n    winter: {\n        text: 'Burr, it is chilly!',\n        iconName: 'snowflake'\n    }\n}\n\nconst getSeason = (lat, month) => {\n    if(month > 2 && month < 9) {\n        return lat > 0 ? 'summer' : 'winter';\n    } else {\n        return lat < 0 ? 'summer' : 'winter';\n    }\n}\n\nconst SeasonDisplay = (props) => {\n    const season = getSeason(props.lat, new Date().getMonth());\n    const { text, iconName } = seasonConfig[season];\n\n    return (\n        <div className={`season-display ${season}`}>\n            <i className={`icon-left massive ${iconName} icon`} />\n            <h1>\n                { text }\n            </h1>\n            <i className={`icon-right massive ${iconName} icon`} />\n        </div>\n    )\n};\n\nexport default SeasonDisplay;","import React from 'react';\n\nconst Spinner = (props) => {\n    return (\n        <div className=\"ui active dimmer\">\n            <div className=\"ui big text loader\">{ props.message }</div>\n        </div>\n    )\n}\n\nSpinner.defaultProps = {\n    message: 'Loading...'\n};\n\nexport default Spinner;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDispaly';\nimport Spinner from './Spinner';\n\nclass App extends React.Component {\n    state = { lat: null, errorMessage: '' };\n\n    componentDidMount() {\n        window.navigator.geolocation.getCurrentPosition(\n            (position) => {\n                // We called setState!!!!\n                this.setState({lat: position.coords.latitude})\n            },\n            (err) => {\n                this.setState({ errorMessage: err.message });\n            }\n        );\n    }\n\n    componentDidUpdate() {\n        console.log('My component was just updated - it rerendered!');\n    }\n\n    renderContent() {\n        if(this.state.errorMessage && !this.state.lat) {\n            return <div>Error: {this.state.errorMessage}</div>;\n        }\n    \n        if(!this.state.errorMessage && this.state.lat) {\n            return <SeasonDisplay lat={this.state.lat} />\n        }\n        \n        return <Spinner message=\"Please accept location request\" />;\n    }\n\n    //React says we have to define Render!!!\n    render() {\n        return (\n            <div className=\"border red\">\n                {this.renderContent()}\n            </div>\n        )\n    }\n}\n\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}